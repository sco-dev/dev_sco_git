// @ts-nocheck
sap.ui.define(["sap/ui/base/Object", "sap/ui/model/json/JSONModel"], function (t, e) { "use strict"; return t.extend("be.wl.objects.model.Clock", { constructor: function (t) { this.data = { startDate: undefined, stopDate: undefined, elapsedTime: 0, intervalId: undefined, ddLabel: "000", hhLabel: "000", mmLabel: "000", ssLabel: "000", msLabel: "000", refreshPeriod: 500 }; if (t && t.startDate) { this.data.startDate = t.startDate } if (t && t.stopDate) { this.data.stopDate = t.stopDate } if (t && t.elapsedTime) { this.data.elapsedTime = t.elapsedTime } this.model = new e; this.model.setData(this.data); this.updateTimeLabels() }, updateTimeLabels: function () { var t = new Date; if (this.model !== undefined) { var e = this.model.getData(); var a = e.startDate; if (a === undefined) { a = t } var i = e.stopDate; if (i === undefined) { i = t } var s = this.splitMilliseconds(this.dateDiff(a, i) + e.elapsedTime); e.ddLabel = this.checkTime(s.dd); e.hhLabel = this.checkTime(s.hh); e.mmLabel = this.checkTime(s.mm); e.ssLabel = this.checkTime(s.ss); e.msLabel = this.checkMilliseconds(s.ms); this.model.setData(e) } else { } }, startTimer: function (t) { if (this.data.startDate && this.data.stopDate) { this.data.elapsedTime += this.dateDiff(this.data.startDate, this.data.stopDate) } if (this.data.intervalId !== undefined) { clearInterval(this.data.intervalId); this.data.intervalId = undefined } if (!t) { this.setProperty("startDate", new Date) } else { this.setProperty("startDate", t) } this.setProperty("stopDate", undefined); var e = this; var a = setInterval(function () { e.updateTimeLabels() }, this.data.refreshPeriod); this.setProperty("intervalId", a); return a }, stopTimer: function () { clearInterval(this.data.intervalId); var t = new Date; this.data.stopDate = t; this.data.intervalId = undefined; this.model.setData(this.data); this.updateTimeLabels(); return t }, startTimer2: function (t) { if (this.data.intervalId !== undefined) { clearInterval(this.data.intervalId); this.data.intervalId = undefined } if (!t) { this.setProperty("startDate", new Date) } else { this.setProperty("startDate", t) } var e = this; var a = setInterval(function () { e.updateTimeLabels() }, this.data.refreshPeriod); this.setProperty("intervalId", a); return a }, stopTimer2: function () { clearInterval(this.data.intervalId); var t = new Date; this.data.elapsedTime += this.dateDiff(this.data.startDate, t); this.data.startDate = undefined; this.data.stopDate = undefined; this.data.intervalId = undefined; this.model.setData(this.data); this.updateTimeLabels(); return t }, isTimerRunning: function () { var t = this.data.intervalId !== undefined; return t }, toggleStartStop: function () { if (this.data.intervalId) { this.stopTimer() } else { this.startTimer() } }, setStartDate: function (t) { this.setProperty("startDate", t); this.updateTimeLabels() }, setStopDate: function (t) { this.setProperty("stopDate", t); this.updateTimeLabels() }, setElapsedTime: function (t) { this.setProperty("elapsedTime", t); this.updateTimeLabels() }, getStartDate: function () { return this.model.getData().startDate }, getStopDate: function () { return this.model.getData().stopDate }, getElapsedTime: function () { return this.model.getData().elapsedTime }, getProperty: function (t) { return this.data[t] }, setProperty: function (t, e) { this.data[t] = e; this.model.setData(this.data) }, setClock: function (t) { this.setModel(t.getModel()) }, getModel: function () { return this.model }, checkTime: function (t) { return t < 10 ? "0" + t : t }, checkMilliseconds: function (t) { if (t < 10) return t + "0"; else return t }, dateDiff: function (t, e) { return e - t }, splitMilliseconds: function (t) { var e = Math.floor(t / 1e3); var a = t % 1e3; a = Math.floor(a / 100); var i = Math.floor(e / 60); e = e % 60; var s = Math.floor(i / 60); i = i % 60; var d = Math.floor(s / 24); s = s % 24; var r = { dd: d, hh: s, mm: i, ss: e, ms: a }; return r }, setModel: function (t) { this.data = t.getData(); this.model.setData(this.data) } }) });